package space.wangjiang.sqlhelper;

import net.sf.jsqlparser.JSQLParserException;
import space.wangjiang.sqlhelper.util.StringUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import java.util.List;

public class MainUI {
    private JTextArea sqlTextArea;
    private JTextArea voTextArea;
    private JButton changeToVOButton;
    private JRadioButton topRadioButton;
    private JRadioButton behindRadioButton;
    private JRadioButton belowRadioButton;
    private JPanel main;

    private SqlHelper sqlHelper = new SqlHelper();

    public MainUI() {
        // 默认选中 下面
        belowRadioButton.setSelected(true);
        // 将三个radio设置为组
        final ButtonGroup group = new ButtonGroup();
        group.add(topRadioButton);
        group.add(behindRadioButton);
        group.add(belowRadioButton);

        changeToVOButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 判断是哪一个radio被选中
                Enumeration<AbstractButton> radioList = group.getElements();
                while (radioList.hasMoreElements()) {
                    JRadioButton radioButton = (JRadioButton) radioList.nextElement();
                    if (radioButton.isSelected()) {
                        String selectedText = radioButton.getText();
                        switch (selectedText) {
                            case "上面":
                                changeSqlToVo(CommentPosition.TOP);
                                break;
                            case "后面":
                                changeSqlToVo(CommentPosition.BEHIND);
                                break;
                            case "下面":
                                changeSqlToVo(CommentPosition.BELOW);
                                break;
                        }
                        break;
                    }
                }
            }
        });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("SqlHelper");
        frame.setContentPane(new MainUI().main);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(1200, 720);
        // 居中显示
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    /**
     * 将SQL语句转化为相应的VO代码
     */
    private void changeSqlToVo(CommentPosition position) {
        String sql = sqlTextArea.getText();
        if (StringUtil.isBlank(sql)) {
            errorDialog("提示", "SQL为空");
            return;
        }
        List<FieldItem> fieldItems;
        try {
            fieldItems = sqlHelper.analysisSql(sql, position);
        } catch (JSQLParserException e) {
            e.printStackTrace();
            errorDialog("错误", "SQL解析错误:" + e.getMessage());
            return;
        }
        StringBuilder voCode = new StringBuilder();
        for (FieldItem fieldItem : fieldItems) {
            voCode.append(sqlHelper.getVOCode(fieldItem));
            voCode.append("\n");
        }
        voTextArea.setText(voCode.toString());
    }

    private void errorDialog(String title, String message) {
        JOptionPane.showMessageDialog(null, message, title, JOptionPane.ERROR_MESSAGE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        main = new JPanel();
        main.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 6, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        changeToVOButton = new JButton();
        Font changeToVOButtonFont = this.$$$getFont$$$("Microsoft YaHei", -1, -1, changeToVOButton.getFont());
        if (changeToVOButtonFont != null) changeToVOButton.setFont(changeToVOButtonFont);
        changeToVOButton.setText("转化为VO >>");
        panel1.add(changeToVOButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        topRadioButton = new JRadioButton();
        Font topRadioButtonFont = this.$$$getFont$$$("Microsoft YaHei", -1, -1, topRadioButton.getFont());
        if (topRadioButtonFont != null) topRadioButton.setFont(topRadioButtonFont);
        topRadioButton.setText("上面");
        panel1.add(topRadioButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        behindRadioButton = new JRadioButton();
        Font behindRadioButtonFont = this.$$$getFont$$$("Microsoft YaHei", -1, -1, behindRadioButton.getFont());
        if (behindRadioButtonFont != null) behindRadioButton.setFont(behindRadioButtonFont);
        behindRadioButton.setText("后面");
        panel1.add(behindRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        belowRadioButton = new JRadioButton();
        belowRadioButton.setEnabled(true);
        Font belowRadioButtonFont = this.$$$getFont$$$("Microsoft YaHei", -1, -1, belowRadioButton.getFont());
        if (belowRadioButtonFont != null) belowRadioButton.setFont(belowRadioButtonFont);
        belowRadioButton.setText("下面");
        panel1.add(belowRadioButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Microsoft YaHei", -1, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("注释相对字段的位置");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        main.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 6, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sqlTextArea = new JTextArea();
        Font sqlTextAreaFont = this.$$$getFont$$$("Microsoft YaHei", -1, -1, sqlTextArea.getFont());
        if (sqlTextAreaFont != null) sqlTextArea.setFont(sqlTextAreaFont);
        sqlTextArea.setMargin(new Insets(10, 20, 0, 0));
        sqlTextArea.setTabSize(4);
        scrollPane1.setViewportView(sqlTextArea);
        final JScrollPane scrollPane2 = new JScrollPane();
        main.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 6, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        voTextArea = new JTextArea();
        voTextArea.setMargin(new Insets(10, 20, 0, 0));
        voTextArea.setTabSize(4);
        scrollPane2.setViewportView(voTextArea);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

}
